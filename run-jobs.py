import os, shutil, itertools, multiprocessing
import scipy as sp

def maketpd(x):
    """make a topy problem description (*.tpd, i.e. input deck) for the case described by the parameters in x"""
    nx = 1025  
    ny = 1025  
    ex = nx - 1
    ey = ny - 1
    fname = "gear_%d-teeth_%d-r_%g-vfrac.tpd" % x
    fout = open(fname, "w")
    fout.write("[ToPy Problem Definition File v2007]\n\n")
    fout.write("#  this input deck automatically generated by run-jobs.py\n")
    fout.write("#  Number of teeth: %g, Radius ratio: %g, Volume Fraction: %g\n\n" % x)

    fout.write("PROB_TYPE  : comp\nPROB_NAME  : gear-%d-%d-%g\nETA        : 0.5\nAPPROX : dquad\n" % (x[0],x[1],x[2]))
    fout.write("DOF_PN     : 2\nVOL_FRAC   : %g\n" % x[2])
    fout.write("FILT_RAD   : 2\nELEM_K     : Q4a5B\nNUM_ELEM_X : %d\nNUM_ELEM_Y : %d\nNUM_ELEM_Z : 0\n" % (ex, ey))
    
    odia = 1000
    orad = odia/2.  
    orad2 = orad**2 
    center = 1024/2.  
    
    # nteeth spaced around the gear at equal angles 
    angle_rad = sp.linspace(0,2*sp.pi,x[0],endpoint=False)
    angle_deg = angle_rad * 180.0 / sp.pi 

    # node numbers, counting column-wise 
    xcoord = sp.around(sp.cos(angle_rad) * orad) + center
    ycoord = sp.around(-sp.sin(angle_rad) * orad) + center 
    nodes = (xcoord-1) * ny + ycoord
    fout.write("LOAD_NODE_Y: ")
    for i,n in enumerate(nodes):
        if i==0:
            fout.write("%d" % n)
        else: 
            fout.write("; %d" % n)
    fout.write("\n")
    fyc = sp.sin(angle_rad - sp.pi/2.)    
    fout.write("LOAD_VALU_Y: ") 
    for i,f in enumerate(fyc):
        if i==0:
            fout.write("%g" % f)
        else:
            fout.write("; %g" % f) 
    fout.write("\n")
    fout.write("LOAD_NODE_X: ")
    for i,n in enumerate(nodes):
        if i==0:
            fout.write("%d" % n)
        else: 
            fout.write("; %d" % n)
    fout.write("\n")
    fxc = sp.cos(angle_rad - sp.pi/2.) 
    fout.write("LOAD_VALU_X: ") 
    for i,f in enumerate(fxc):
        if i==0:
            fout.write("%g" % f)
        else:
            fout.write("; %g" % f) 
    fout.write("\n")
    # fixed nodes at the hub 
    idia = odia / x[1]  
    irad = idia/2.  
    irad2 = irad**2 
    nfixtr = x[0] * 10 
    fixtr_angle = sp.linspace(0, 2*sp.pi, nfixtr, endpoint=False) 
    fixtrx = sp.around(sp.cos(fixtr_angle)*irad) + center
    fixtry = -sp.around(sp.sin(fixtr_angle)*irad) + center 
    nodes = sp.unique((fixtrx - 1) * ny + fixtry)
    fout.write("FXTR_NODE_X: ")
    for i,n in enumerate(nodes):
        if i==0:
            fout.write("%d" % n)
        else:
            fout.write("; %d" % n)
    fout.write("\n")
    fout.write("FXTR_NODE_Y: ")
    for i,n in enumerate(nodes):
        if i==0:
            fout.write("%d" % n)
        else:
            fout.write("; %d" % n)
    fout.write("\n")
    # active elements around the rim 
    nelem = sp.around(sp.pi * odia)
    sangle = sp.linspace(0, 2*sp.pi, nelem, endpoint=False)
    aex = sp.around(sp.cos(sangle) * (orad-1)) + center 
    aey = -sp.around(sp.sin(sangle) * (orad-1)) + center 
    elem = (aex-1) * ey + aey 
    elem = sp.unique(elem) 
    fout.write("ACTV_ELEM: ")
    for i,e in enumerate(elem):
        if i==0:
            fout.write("%d" % e)
        else:
            fout.write("; %d" % e)
    # active elements around the hub 
    aex = sp.around(sp.cos(sangle) * (irad-1)) + center 
    aey = -sp.around(sp.sin(sangle) * (irad-1)) + center 
    elem = (aex-1) * ey + aey 
    elem = sp.unique(elem) 
    for i,e in enumerate(elem):
        fout.write("; %d" % e)
    fout.write("\n") 
    for l in open("pasv_elem.txt"): 
        fout.write(l)
    fout.write("\nNUM_ITER : 249\nP_FAC : 1\nP_HOLD : 5\nP_MAX : 3\nP_INCR : 0.05\nP_CON : 1\n")
    fout.close()
    return(0) 

def makecasedir(x):
    current = os.getcwd()
    os.mkdir(current + "/gear-%d-%d-%g" % x)
    os.chdir(current + "/gear-%d-%d-%g" % x)
    shutil.copy(current + "/optimise.py" , current + "/gear-%d-%d-%g" % x)
    shutil.copy(current + "/pasv_elem.txt" , current + "/gear-%d-%d-%g" % x)
    maketpd(x)
    os.chdir(current)

def runcase(x):
    current = os.getcwd()
    os.chdir(current + "/gear-%d-%d-%g" % x)
    os.system("python optimise.py " + "gear_%d-teeth_%d-r_%g-vfrac.tpd > jobs.out" % x)
    os.chdir(current)

def f(x):    
    makecasedir(x)
    runcase(x) 
    return(0)


if __name__ == '__main__':
    nteeth = range(33,34)
    rrat = range(4,5)
    vfrac = [0.2,0.3]
    jobs = itertools.product(nteeth, rrat, vfrac)

    nproc = 2
    pool = multiprocessing.Pool(processes = nproc)
    
    print "Starting jobs"

    result = pool.map(f, jobs)

    print "Finished"
